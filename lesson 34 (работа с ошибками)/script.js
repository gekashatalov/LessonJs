"use strict";

// Констарукция try / catch позволяет работать с ошибками, и в случаи ошибки пустить код по правильному пути, указанному в catch.
//Рассмотрим пример ошибки:

try {
        console.log('всё фунциклирует!') // в данном случае сработает первая часть (try) так как никакой ошибки нет
} catch {
    console.log('что то пошло не так')
};

try {
    console.log(a); // в этом случае код пойдет по пути catch, так как ему не удалось вывести еще не созаднную переменную
    console.log('всё фунциклирует!') 
} catch {
console.log('что то пошло не так')
};

// Вывод самих ошибок, их названий и значений:

try {
    console.log(a); // в этом случае код пойдет по пути catch, так как ему не удалось вывести еще не созаднную переменную
    console.log('всё фунциклирует!') 
} catch(error) {
console.log(error)// выведет полное описание ошибки(имя, значение, местоположение в коде)
};


try {
    console.log(a); // в этом случае код пойдет по пути catch, так как ему не удалось вывести еще не созаднную переменную
    console.log('всё фунциклирует!') 
} catch(error) {
console.log(error.name);// выведет имя ошибки
console.log(error.message);// выведет сообщение ошибки
console.log(error.stack);// выведет  ошибку

};

// третий метод finally - сработет всегда, и при try и при catch

try {
    console.log(a); // в этом случае код пойдет по пути catch, так как ему не удалось вывести еще не созаднную переменную
    console.log('всё фунциклирует!') 
} catch(error) {
console.log(error.name);// выведет имя ошибки
console.log(error.message);// выведет сообщение ошибки
console.log(error.stack);// выведет  ошибку
} finally {
    console.log('А я сработаю всегда!')
}